class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adj.get(i).add(j);
                    adj.get(j).add(i);  
                }
            }
        } 
        int count = 0;
        boolean visited[] = new boolean[n+1];
        for(int i=0;i<n;i++){
            if(!visited[i]){
                count++;
                dfs(i,adj,visited);
            }
        }
        return count;
    }
    public void dfs(int source, ArrayList<ArrayList<Integer>> adj, boolean visited[]){
        visited[source] = true;
        for(Integer i : adj.get(source)){
            if(!visited[i]){
                dfs(i,adj,visited);
            }
        }
    }
}
/*
class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean visited[] = new boolean[n];
        int count = 0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                count++;
                dfs(i,isConnected,visited);
            }
        }
        return count;
    }
    public void dfs(int source, int[][] isConnected, boolean visited[]){
        visited[source] = true;
        for(int i=0;i<isConnected.length;i++){
            if(!visited[i] && isConnected[source][i]==1){
                dfs(i,isConnected,visited);
            }
        }
    }
}*/
