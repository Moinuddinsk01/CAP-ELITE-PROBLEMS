class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean visited[] = new boolean[V];
        for(int i=0;i<V;i++){
            if(!visited[i] && bfs(i,adj,visited)){
                return true;
            }
        }
        return false;
    }
    public boolean bfs(int source, ArrayList<ArrayList<Integer>> adj, boolean visited[]){
        visited[source] = true;
        Queue<Pair> que = new LinkedList<>();
        que.add(new Pair(source,-1));
        while(!que.isEmpty()){
            Pair pair = que.poll();
            for(Integer i : adj.get(pair.node)){
                if(!visited[i]){
                    visited[i] = true;
                    que.add(new Pair(i,pair.node));
                }
                else if(pair.parent != i){
                    return true;
                }
            }
        }
        return false;
    }
}
class Pair{
    int node;
    int parent;
    Pair(int node, int parent){
        this.node = node;
        this.parent = parent;
    }
}
