class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return constructTree(preorder,inorder,map,0,inorder.length-1,0,preorder.length,new int[]{0});
    }
    public static TreeNode constructTree(int[] pre, int[] in, HashMap<Integer,Integer> map, int inStart, int inEnd, int preStart, int preEnd, int[] curr){
        if(preStart>preEnd || inStart>inEnd) return null;
        TreeNode root = new TreeNode(pre[curr[0]++]);
        int inRoot = map.get(root.val);
        int numsLeft = inRoot-inStart;
        root.left = constructTree(pre,in,map,inStart,inRoot-1,preStart+1,preStart+numsLeft,curr);
        root.right = constructTree(pre,in,map,inRoot+1,inEnd,preStart+numsLeft+1,preEnd,curr);
        return root;
    }
}
